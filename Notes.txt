How to proceed to make project

# E-Commerce Website-

# following are the pages and functionality:

-Home Page, navihation, routing
-List of entries - 
 - Search ,filter, Sort,Pagination
-an individual page for each entity
-Cart
-Payment Page
Note- Add more function iteratively

# what we are using to build this project
-React Redux
-JSON server
-CSS Library - Chakra UI

# Deployment

# Flow:
1.Intro
2.Project Setup
3.NavbarRouting
4.JSOn server Setup
5.Redux Intro and Setup
6.Redux Thunk
7.Listing entries
8.Product Entity Component
9.Single Entity Page
10.Adding to Cart
11.cart functionality
12.Sort and filter -1
 more...

#async and await / try catch for Shoppage
```
import React, { useEffect } from "react";

function Shoppage() {
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch("https://e-com-json-api-mock.onrender.com/products");
        if (!response.ok) {
          throw new Error("Failed to fetch data");
        }
        const data = await response.json();
        console.log(data);
      } catch (err) {
        console.log(err.message);
      }
    };

    fetchData();
  }, []);

  return <div>Shoppage</div>;
}

export default Shoppage;
```
```
 useEffect(() => {
    fetch("https://e-com-json-api-mock.onrender.com/products")
      .then((res) => res.json())
      .then((data) => console.log(data))
      .catch((err) => console.log(err.message));
  }, []);  
```  
# LOGIC
-state can be change update through dispatching action in redux.
-whenever we want to add,update or etc.in the redux we have to use dispatch.
-whenever we want to get something from redux we have to use useSelector.

# Redux Fundamentals, Async Logic and Data Fetching:
parting away the logic of async Fetching data from component to action type.

# Redux - Thunk ?why.
-In Redux, a "thunk" is a middleware that allows you to write action creators 
that return a function instead of an action object. This function can then perform 
asynchronous operations, such as API calls, and dispatch regular synchronous actions
based on the results.
-Thunk middleware intercepts these functions and gives them the ability to dispatch 
actions themselves. This is particularly useful for handling complex asynchronous 
logic, like fetching data from a server, without cluttering your components with 
this logic.

eg:
const fetchData = () => {
  return async (dispatch) => {
    dispatch({ type: 'FETCH_DATA_REQUEST' });

    try {
      const response = await fetch('https://api.example.com/data');
      const data = await response.json();

      dispatch({ type: 'FETCH_DATA_SUCCESS', payload: data });
    } catch (error) {
      dispatch({ type: 'FETCH_DATA_FAILURE', payload: error.message });
    }
  };
};

# useof useState hook to change image hove effect making functions
# use of useNavigate to redirect to single product page

# using useParams to get single entity by id:
